
optiboot_atmega1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000256  0001fc00  0001fc00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  0001fffe  0001fffe  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_aranges 00000028  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000074  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004b0  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000232  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000536  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001bb  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003a6  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d0  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <main>:
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
   1fc00:	11 24       	eor	r1, r1
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
   1fc02:	94 b7       	in	r25, 0x34	; 52
  MCUSR = 0;
   1fc04:	14 be       	out	0x34, r1	; 52
#else
  ch = MCUCSR;
  MCUCSR = 0;
#endif
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
   1fc06:	89 2f       	mov	r24, r25
   1fc08:	8d 70       	andi	r24, 0x0D	; 13
   1fc0a:	11 f0       	breq	.+4      	; 0x1fc10 <main+0x10>
      appStart(ch);
   1fc0c:	89 2f       	mov	r24, r25
   1fc0e:	1d d1       	rcall	.+570    	; 0x1fe4a <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc10:	85 e0       	ldi	r24, 0x05	; 5
   1fc12:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc16:	82 e0       	ldi	r24, 0x02	; 2
   1fc18:	80 93 c8 00 	sts	0x00C8, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc1c:	88 e1       	ldi	r24, 0x18	; 24
   1fc1e:	80 93 c9 00 	sts	0x00C9, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc22:	86 e0       	ldi	r24, 0x06	; 6
   1fc24:	80 93 ca 00 	sts	0x00CA, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc28:	85 e1       	ldi	r24, 0x15	; 21
   1fc2a:	80 93 cc 00 	sts	0x00CC, r24
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
   1fc2e:	8e e0       	ldi	r24, 0x0E	; 14
   1fc30:	f6 d0       	rcall	.+492    	; 0x1fe1e <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc32:	20 9a       	sbi	0x04, 0	; 4
   1fc34:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc36:	2c e3       	ldi	r18, 0x3C	; 60
   1fc38:	3b ef       	ldi	r19, 0xFB	; 251
    TIFR1 = _BV(TOV1);
   1fc3a:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc3c:	30 93 85 00 	sts	0x0085, r19
   1fc40:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
   1fc44:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc46:	b0 9b       	sbis	0x16, 0	; 22
   1fc48:	fe cf       	rjmp	.-4      	; 0x1fc46 <main+0x46>
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc4a:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc4c:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1fc4e:	81 50       	subi	r24, 0x01	; 1
   1fc50:	a9 f7       	brne	.-22     	; 0x1fc3c <main+0x3c>
   1fc52:	cc 24       	eor	r12, r12
   1fc54:	dd 24       	eor	r13, r13
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
   1fc56:	23 e0       	ldi	r18, 0x03	; 3
   1fc58:	82 2e       	mov	r8, r18
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fc5a:	aa 24       	eor	r10, r10
   1fc5c:	a3 94       	inc	r10
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
   1fc5e:	91 e1       	ldi	r25, 0x11	; 17
   1fc60:	99 2e       	mov	r9, r25
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc62:	d1 d0       	rcall	.+418    	; 0x1fe06 <getch>

    if(ch == STK_GET_PARAMETER) {
   1fc64:	81 34       	cpi	r24, 0x41	; 65
   1fc66:	71 f4       	brne	.+28     	; 0x1fc84 <main+0x84>
      unsigned char which = getch();
   1fc68:	ce d0       	rcall	.+412    	; 0x1fe06 <getch>
   1fc6a:	18 2f       	mov	r17, r24
      verifySpace();
   1fc6c:	de d0       	rcall	.+444    	; 0x1fe2a <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
   1fc6e:	12 38       	cpi	r17, 0x82	; 130
   1fc70:	11 f4       	brne	.+4      	; 0x1fc76 <main+0x76>
	  putch(optiboot_version & 0xFF);
   1fc72:	82 e0       	ldi	r24, 0x02	; 2
   1fc74:	05 c0       	rjmp	.+10     	; 0x1fc80 <main+0x80>
      } else if (which == STK_SW_MAJOR) {
   1fc76:	11 38       	cpi	r17, 0x81	; 129
   1fc78:	11 f4       	brne	.+4      	; 0x1fc7e <main+0x7e>
	  putch(optiboot_version >> 8);
   1fc7a:	86 e0       	ldi	r24, 0x06	; 6
   1fc7c:	01 c0       	rjmp	.+2      	; 0x1fc80 <main+0x80>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1fc7e:	83 e0       	ldi	r24, 0x03	; 3
   1fc80:	ba d0       	rcall	.+372    	; 0x1fdf6 <putch>
   1fc82:	b6 c0       	rjmp	.+364    	; 0x1fdf0 <main+0x1f0>
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1fc84:	82 34       	cpi	r24, 0x42	; 66
   1fc86:	11 f4       	brne	.+4      	; 0x1fc8c <main+0x8c>
      // SET DEVICE is ignored
      getNch(20);
   1fc88:	84 e1       	ldi	r24, 0x14	; 20
   1fc8a:	03 c0       	rjmp	.+6      	; 0x1fc92 <main+0x92>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fc8c:	85 34       	cpi	r24, 0x45	; 69
   1fc8e:	19 f4       	brne	.+6      	; 0x1fc96 <main+0x96>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc90:	85 e0       	ldi	r24, 0x05	; 5
   1fc92:	d3 d0       	rcall	.+422    	; 0x1fe3a <getNch>
   1fc94:	ad c0       	rjmp	.+346    	; 0x1fdf0 <main+0x1f0>
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fc96:	85 35       	cpi	r24, 0x55	; 85
   1fc98:	a1 f4       	brne	.+40     	; 0x1fcc2 <main+0xc2>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1fc9a:	b5 d0       	rcall	.+362    	; 0x1fe06 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fc9c:	08 2f       	mov	r16, r24
   1fc9e:	10 e0       	ldi	r17, 0x00	; 0
   1fca0:	b2 d0       	rcall	.+356    	; 0x1fe06 <getch>
   1fca2:	e8 2e       	mov	r14, r24
   1fca4:	ff 24       	eor	r15, r15
   1fca6:	fe 2c       	mov	r15, r14
   1fca8:	ee 24       	eor	r14, r14
   1fcaa:	e0 2a       	or	r14, r16
   1fcac:	f1 2a       	or	r15, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1fcae:	8f 2d       	mov	r24, r15
   1fcb0:	88 1f       	adc	r24, r24
   1fcb2:	88 27       	eor	r24, r24
   1fcb4:	88 1f       	adc	r24, r24
   1fcb6:	8b bf       	out	0x3b, r24	; 59
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1fcb8:	ee 0c       	add	r14, r14
   1fcba:	ff 1c       	adc	r15, r15
      address = newAddress;
      verifySpace();
   1fcbc:	b6 d0       	rcall	.+364    	; 0x1fe2a <verifySpace>
   1fcbe:	67 01       	movw	r12, r14
   1fcc0:	97 c0       	rjmp	.+302    	; 0x1fdf0 <main+0x1f0>
    }
    else if(ch == STK_UNIVERSAL) {
   1fcc2:	86 35       	cpi	r24, 0x56	; 86
   1fcc4:	21 f4       	brne	.+8      	; 0x1fcce <main+0xce>
      // UNIVERSAL command is ignored
      getNch(4);
   1fcc6:	84 e0       	ldi	r24, 0x04	; 4
   1fcc8:	b8 d0       	rcall	.+368    	; 0x1fe3a <getNch>
      putch(0x00);
   1fcca:	80 e0       	ldi	r24, 0x00	; 0
   1fccc:	d9 cf       	rjmp	.-78     	; 0x1fc80 <main+0x80>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcce:	84 36       	cpi	r24, 0x64	; 100
   1fcd0:	09 f0       	breq	.+2      	; 0x1fcd4 <main+0xd4>
   1fcd2:	5a c0       	rjmp	.+180    	; 0x1fd88 <main+0x188>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fcd4:	98 d0       	rcall	.+304    	; 0x1fe06 <getch>
   1fcd6:	90 e0       	ldi	r25, 0x00	; 0
   1fcd8:	d8 2f       	mov	r29, r24
   1fcda:	cc 27       	eor	r28, r28
   1fcdc:	94 d0       	rcall	.+296    	; 0x1fe06 <getch>
   1fcde:	90 e0       	ldi	r25, 0x00	; 0
   1fce0:	c8 2b       	or	r28, r24
   1fce2:	d9 2b       	or	r29, r25
      savelength = length;
      desttype = getch();
   1fce4:	90 d0       	rcall	.+288    	; 0x1fe06 <getch>
   1fce6:	b8 2e       	mov	r11, r24
   1fce8:	8e 01       	movw	r16, r28
   1fcea:	e1 2c       	mov	r14, r1
   1fcec:	f1 e0       	ldi	r31, 0x01	; 1
   1fcee:	ff 2e       	mov	r15, r31

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fcf0:	8a d0       	rcall	.+276    	; 0x1fe06 <getch>
   1fcf2:	f7 01       	movw	r30, r14
   1fcf4:	81 93       	st	Z+, r24
   1fcf6:	7f 01       	movw	r14, r30
      while (--length);
   1fcf8:	01 50       	subi	r16, 0x01	; 1
   1fcfa:	10 40       	sbci	r17, 0x00	; 0
   1fcfc:	c9 f7       	brne	.-14     	; 0x1fcf0 <main+0xf0>

      // Read command terminator, start reply
      verifySpace();
   1fcfe:	95 d0       	rcall	.+298    	; 0x1fe2a <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
   1fd00:	f5 e4       	ldi	r31, 0x45	; 69
   1fd02:	bf 16       	cp	r11, r31
   1fd04:	c1 f4       	brne	.+48     	; 0x1fd36 <main+0x136>
   1fd06:	96 01       	movw	r18, r12
   1fd08:	e0 e0       	ldi	r30, 0x00	; 0
   1fd0a:	f1 e0       	ldi	r31, 0x01	; 1
   1fd0c:	11 c0       	rjmp	.+34     	; 0x1fd30 <main+0x130>
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
   1fd0e:	40 81       	ld	r20, Z
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
   1fd10:	f9 99       	sbic	0x1f, 1	; 31
   1fd12:	fe cf       	rjmp	.-4      	; 0x1fd10 <main+0x110>
   1fd14:	c9 01       	movw	r24, r18
   1fd16:	01 96       	adiw	r24, 0x01	; 1
   1fd18:	31 96       	adiw	r30, 0x01	; 1

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
   1fd1a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
   1fd1c:	32 bd       	out	0x22, r19	; 34
   1fd1e:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
   1fd20:	40 bd       	out	0x20, r20	; 32

    __asm__ __volatile__ (
   1fd22:	0f b6       	in	r0, 0x3f	; 63
   1fd24:	f8 94       	cli
   1fd26:	fa 9a       	sbi	0x1f, 2	; 31
   1fd28:	f9 9a       	sbi	0x1f, 1	; 31
   1fd2a:	0f be       	out	0x3f, r0	; 63
   1fd2c:	21 97       	sbiw	r28, 0x01	; 1
   1fd2e:	9c 01       	movw	r18, r24
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
   1fd30:	20 97       	sbiw	r28, 0x00	; 0
   1fd32:	69 f7       	brne	.-38     	; 0x1fd0e <main+0x10e>
   1fd34:	5d c0       	rjmp	.+186    	; 0x1fdf0 <main+0x1f0>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
   1fd36:	f6 01       	movw	r30, r12
   1fd38:	87 be       	out	0x37, r8	; 55
   1fd3a:	e8 95       	spm
	    boot_spm_busy_wait();
   1fd3c:	07 b6       	in	r0, 0x37	; 55
   1fd3e:	00 fc       	sbrc	r0, 0
   1fd40:	fd cf       	rjmp	.-6      	; 0x1fd3c <main+0x13c>
   1fd42:	be 01       	movw	r22, r28
   1fd44:	a6 01       	movw	r20, r12
   1fd46:	a0 e0       	ldi	r26, 0x00	; 0
   1fd48:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
   1fd4a:	2c 91       	ld	r18, X
   1fd4c:	30 e0       	ldi	r19, 0x00	; 0
		a |= (*bufPtr++) << 8;
   1fd4e:	11 96       	adiw	r26, 0x01	; 1
   1fd50:	8c 91       	ld	r24, X
   1fd52:	11 97       	sbiw	r26, 0x01	; 1
   1fd54:	90 e0       	ldi	r25, 0x00	; 0
   1fd56:	98 2f       	mov	r25, r24
   1fd58:	88 27       	eor	r24, r24
   1fd5a:	82 2b       	or	r24, r18
   1fd5c:	93 2b       	or	r25, r19
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
   1fd5e:	12 96       	adiw	r26, 0x02	; 2
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fd60:	fa 01       	movw	r30, r20
   1fd62:	0c 01       	movw	r0, r24
   1fd64:	a7 be       	out	0x37, r10	; 55
   1fd66:	e8 95       	spm
   1fd68:	11 24       	eor	r1, r1
		addrPtr += 2;
   1fd6a:	4e 5f       	subi	r20, 0xFE	; 254
   1fd6c:	5f 4f       	sbci	r21, 0xFF	; 255
	    } while (len -= 2);
   1fd6e:	62 50       	subi	r22, 0x02	; 2
   1fd70:	70 40       	sbci	r23, 0x00	; 0
   1fd72:	59 f7       	brne	.-42     	; 0x1fd4a <main+0x14a>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
   1fd74:	85 e0       	ldi	r24, 0x05	; 5
   1fd76:	f6 01       	movw	r30, r12
   1fd78:	87 bf       	out	0x37, r24	; 55
   1fd7a:	e8 95       	spm
	    boot_spm_busy_wait();
   1fd7c:	07 b6       	in	r0, 0x37	; 55
   1fd7e:	00 fc       	sbrc	r0, 0
   1fd80:	fd cf       	rjmp	.-6      	; 0x1fd7c <main+0x17c>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
   1fd82:	97 be       	out	0x37, r9	; 55
   1fd84:	e8 95       	spm
   1fd86:	34 c0       	rjmp	.+104    	; 0x1fdf0 <main+0x1f0>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fd88:	84 37       	cpi	r24, 0x74	; 116
   1fd8a:	21 f5       	brne	.+72     	; 0x1fdd4 <main+0x1d4>
      uint8_t desttype;
      GETLENGTH(length);
   1fd8c:	3c d0       	rcall	.+120    	; 0x1fe06 <getch>
   1fd8e:	90 e0       	ldi	r25, 0x00	; 0
   1fd90:	d8 2f       	mov	r29, r24
   1fd92:	cc 27       	eor	r28, r28
   1fd94:	38 d0       	rcall	.+112    	; 0x1fe06 <getch>
   1fd96:	90 e0       	ldi	r25, 0x00	; 0
   1fd98:	c8 2b       	or	r28, r24
   1fd9a:	d9 2b       	or	r29, r25

      desttype = getch();
   1fd9c:	34 d0       	rcall	.+104    	; 0x1fe06 <getch>
   1fd9e:	18 2f       	mov	r17, r24

      verifySpace();
   1fda0:	44 d0       	rcall	.+136    	; 0x1fe2a <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
   1fda2:	15 34       	cpi	r17, 0x45	; 69
   1fda4:	79 f4       	brne	.+30     	; 0x1fdc4 <main+0x1c4>
   1fda6:	c6 01       	movw	r24, r12

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
   1fda8:	8c 01       	movw	r16, r24
   1fdaa:	0f 5f       	subi	r16, 0xFF	; 255
   1fdac:	1f 4f       	sbci	r17, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
   1fdae:	f9 99       	sbic	0x1f, 1	; 31
   1fdb0:	fe cf       	rjmp	.-4      	; 0x1fdae <main+0x1ae>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
   1fdb2:	92 bd       	out	0x22, r25	; 34
   1fdb4:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
   1fdb6:	f8 9a       	sbi	0x1f, 0	; 31
   1fdb8:	80 b5       	in	r24, 0x20	; 32
   1fdba:	1d d0       	rcall	.+58     	; 0x1fdf6 <putch>
	} while (--length);
   1fdbc:	21 97       	sbiw	r28, 0x01	; 1
   1fdbe:	c1 f0       	breq	.+48     	; 0x1fdf0 <main+0x1f0>
   1fdc0:	c8 01       	movw	r24, r16
   1fdc2:	f2 cf       	rjmp	.-28     	; 0x1fda8 <main+0x1a8>
   1fdc4:	86 01       	movw	r16, r12
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
   1fdc6:	f8 01       	movw	r30, r16
   1fdc8:	87 91       	elpm	r24, Z+
   1fdca:	8f 01       	movw	r16, r30
   1fdcc:	14 d0       	rcall	.+40     	; 0x1fdf6 <putch>
	} while (--length);
   1fdce:	21 97       	sbiw	r28, 0x01	; 1
   1fdd0:	d1 f7       	brne	.-12     	; 0x1fdc6 <main+0x1c6>
   1fdd2:	0e c0       	rjmp	.+28     	; 0x1fdf0 <main+0x1f0>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fdd4:	85 37       	cpi	r24, 0x75	; 117
   1fdd6:	39 f4       	brne	.+14     	; 0x1fde6 <main+0x1e6>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fdd8:	28 d0       	rcall	.+80     	; 0x1fe2a <verifySpace>
      putch(SIGNATURE_0);
   1fdda:	8e e1       	ldi	r24, 0x1E	; 30
   1fddc:	0c d0       	rcall	.+24     	; 0x1fdf6 <putch>
      putch(SIGNATURE_1);
   1fdde:	87 e9       	ldi	r24, 0x97	; 151
   1fde0:	0a d0       	rcall	.+20     	; 0x1fdf6 <putch>
      putch(SIGNATURE_2);
   1fde2:	85 e0       	ldi	r24, 0x05	; 5
   1fde4:	4d cf       	rjmp	.-358    	; 0x1fc80 <main+0x80>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fde6:	81 35       	cpi	r24, 0x51	; 81
   1fde8:	11 f4       	brne	.+4      	; 0x1fdee <main+0x1ee>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1fdea:	88 e0       	ldi	r24, 0x08	; 8
   1fdec:	18 d0       	rcall	.+48     	; 0x1fe1e <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fdee:	1d d0       	rcall	.+58     	; 0x1fe2a <verifySpace>
    }
    putch(STK_OK);
   1fdf0:	80 e1       	ldi	r24, 0x10	; 16
   1fdf2:	01 d0       	rcall	.+2      	; 0x1fdf6 <putch>
   1fdf4:	36 cf       	rjmp	.-404    	; 0x1fc62 <main+0x62>

0001fdf6 <putch>:
  }
}

void putch(char ch) {
   1fdf6:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fdf8:	80 91 c8 00 	lds	r24, 0x00C8
   1fdfc:	85 ff       	sbrs	r24, 5
   1fdfe:	fc cf       	rjmp	.-8      	; 0x1fdf8 <putch+0x2>
  UART_UDR = ch;
   1fe00:	90 93 ce 00 	sts	0x00CE, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
   1fe04:	08 95       	ret

0001fe06 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fe06:	80 91 c8 00 	lds	r24, 0x00C8
   1fe0a:	87 ff       	sbrs	r24, 7
   1fe0c:	fc cf       	rjmp	.-8      	; 0x1fe06 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fe0e:	80 91 c8 00 	lds	r24, 0x00C8
   1fe12:	84 fd       	sbrc	r24, 4
   1fe14:	01 c0       	rjmp	.+2      	; 0x1fe18 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fe16:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fe18:	80 91 ce 00 	lds	r24, 0x00CE
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fe1c:	08 95       	ret

0001fe1e <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe1e:	e0 e6       	ldi	r30, 0x60	; 96
   1fe20:	f0 e0       	ldi	r31, 0x00	; 0
   1fe22:	98 e1       	ldi	r25, 0x18	; 24
   1fe24:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe26:	80 83       	st	Z, r24
}
   1fe28:	08 95       	ret

0001fe2a <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fe2a:	ed df       	rcall	.-38     	; 0x1fe06 <getch>
   1fe2c:	80 32       	cpi	r24, 0x20	; 32
   1fe2e:	19 f0       	breq	.+6      	; 0x1fe36 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe30:	88 e0       	ldi	r24, 0x08	; 8
   1fe32:	f5 df       	rcall	.-22     	; 0x1fe1e <watchdogConfig>
   1fe34:	ff cf       	rjmp	.-2      	; 0x1fe34 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fe36:	84 e1       	ldi	r24, 0x14	; 20
}
   1fe38:	de cf       	rjmp	.-68     	; 0x1fdf6 <putch>

0001fe3a <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fe3a:	1f 93       	push	r17
   1fe3c:	18 2f       	mov	r17, r24
  do getch(); while (--count);
   1fe3e:	e3 df       	rcall	.-58     	; 0x1fe06 <getch>
   1fe40:	11 50       	subi	r17, 0x01	; 1
   1fe42:	e9 f7       	brne	.-6      	; 0x1fe3e <getNch+0x4>
  verifySpace();
   1fe44:	f2 df       	rcall	.-28     	; 0x1fe2a <verifySpace>
}
   1fe46:	1f 91       	pop	r17
   1fe48:	08 95       	ret

0001fe4a <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fe4a:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
   1fe4c:	80 e0       	ldi	r24, 0x00	; 0
   1fe4e:	e7 df       	rcall	.-50     	; 0x1fe1e <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
   1fe50:	e0 e0       	ldi	r30, 0x00	; 0
   1fe52:	ff 27       	eor	r31, r31
   1fe54:	09 94       	ijmp
